//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BookStarToy.Model
{
	using System;
	using System.Text.RegularExpressions;
	using System.Collections.Specialized;
	using BookStarToy.SBP;

	/// <summary>状态通知代理</summary>
	public delegate void StatusNotify(Object oSender, Object oStatus);

	/// <summary>状态变更结构</summary>
	public class BookStatusNotify
	{
		/// <summary>书名变更</summary>
		public string BookName = null;
		/// <summary>下载状态变更</summary>
		public BookStatus BookStatus = BookStatus.Unknown;
		/// <summary>完成数变更</summary>
		public int FinishedCount = -1;
		/// <summary>总数变更</summary>
		public int TotalCount = -1;
	}

	/// <summary>
	/// 图书创建参数类
	/// </summary>
	public class BookParam
	{
		/// <summary>输出路径</summary>
		protected string strOutputPath = "";

		/// <summary>文件的压缩类型</summary>
		public FileCompressType CompressType;

		/// <summary>输出路径属性</summary>
		public string	OutputPath
		{
			get { return strOutputPath;}
			set	{
				strOutputPath = value;
				if ( 0 != strOutputPath.Length && 
				    strOutputPath[strOutputPath.Length - 1] != '\\')
					strOutputPath += '\\';
			}
		}
	}

	/// <summary>
	/// 文章当前的状态
	/// </summary>
	public enum ArticleStatus { 
		/// <summary>初始化状态</summary>
		Init, 
		/// <summary>下载中状态</summary>
		Downloading, 
		/// <summary>分析中状态</summary>
		Parsing, 
		/// <summary>保存中状态</summary>
		Saving, 
		/// <summary>完成状态</summary>
		Finished 
	}

	/// <summary>
	/// 图书当前的状态
	/// </summary>
	public enum BookStatus {
		/// <summary>未初始化或未知状态</summary>
		Unknown,
		/// <summary>初始化状态</summary>
		Init, 
		/// <summary>创建中状态</summary>
		Building, 
		/// <summary>分析中状态</summary>
		Pausing, 
		/// <summary>错误状态</summary>
		Error, 
		/// <summary>完成状态</summary>
		Finished 
	}
		
	/// <summary>
	/// 文章信息类
	/// </summary>
	public class Article
	{
		/// <summary>文章当前的状态</summary>
		public ArticleStatus 	Status;		

		/// <summary>文章名</summary>
		public string		Name;		

		/// <summary>文章的原网页URL</summary>
		public string 		URL;		

		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param name="strName">文章名</param>
		/// <param name="strURL">文章的原网页URL</param>
		public Article( string strName, string strURL )
		{
			Name = strName;
			URL = strURL;
			Status = ArticleStatus.Init;
		}
	}

	/// <summary>
	/// 图书信息类
	/// </summary>
	public class Book
	{
		/// <summary>状态通知接口</summary>
		public StatusNotify StatusNotify = null;

		/// <summary>图书当前状态</summary>
		protected BookStatus m_Status;

		/// <summary>图书当前状态</summary>
		public BookStatus Status
		{
			get { return m_Status; }
			set
			{
				m_Status = value;
				if (StatusNotify == null)
					return;
				BookStatusNotify bsn = new BookStatusNotify();
				bsn.TotalCount = Count;
				bsn.FinishedCount = FinishedCount;
				bsn.BookStatus = value;
				StatusNotify(this, bsn);
			}
		}
		
		/// <summary>图书名</summary>
		protected string		m_strName;

		/// <summary>图书名</summary>
		public string Name
		{
			get { return m_strName; }
			set
			{
				m_strName = value;
				if (StatusNotify == null)
					return;
				BookStatusNotify bsn = new BookStatusNotify();
				bsn.BookName = value;
				StatusNotify(this, bsn);
			}
		}
		
		/// <summary>图书目录网页URL</summary>
		public string 		URL;		

		/// <summary>SBP信息段</summary>
		public BookStarToy.SBP.InfoSection	infoSect;

		/// <summary>图书参数</summary>
		public BookParam			Params;

		/// <summary>当前文章完成数</summary>
		public Int32 m_FinishedCount = 0;

		/// <summary>当前文章完成数</summary>
		public Int32 FinishedCount
		{
			get { return m_FinishedCount; }
			set
			{
				m_FinishedCount = value;
				if (StatusNotify == null)
					return;
				BookStatusNotify bsn = new BookStatusNotify();
				bsn.FinishedCount = value;
				bsn.TotalCount = Count;
				StatusNotify(this, bsn);
			}
		}

		/// <summary>图书当前状态信息</summary>
		public string Message = null;

		/// <summary>图书文章列表</summary>
		protected System.Collections.ArrayList 	Articles = new System.Collections.ArrayList();	

		/// <summary>
		/// 通过下标获取相应的文章信息
		/// </summary>
		/// <param name="nIndex">文章列表下标</param>
		public Article this[ int nIndex ]
		{
			get { 
				if ( nIndex < 0 || nIndex >= Articles.Count )
					return null;
				
				return (Article)Articles[nIndex];
			}
		}

		/// <summary>
		/// 当前图书包括文章数
		/// </summary>
		public Int32 Count
		{
			get { return Articles.Count; }
		}

		/// <summary>
		/// 添加文章信息
		/// </summary>
		/// <param name="strName">文章名</param>
		/// <param name="strURL">文章所在网页URL</param>
		public void Add( string strName, string strURL )
		{
			Article article = new Article( strName, strURL );
			Articles.Add( article );
		}

		/// <summary>
		/// 图书SBP文件的路径
		/// </summary>
		public string Path
		{
			get {
				return Params.OutputPath + ( ( null == Name ) ? "未命名" : Name ) + ".sbp";
			}
		}

		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param name="strURL">图书目录网页URL</param>
		/// <param name="param">图书创建参数</param>
		/// <param name="sbpis">图书SBP文件的信息段</param>
		public Book( string strURL, BookParam param, BookStarToy.SBP.InfoSection sbpis )
		{
			URL = strURL;
			Params = param;
			Status = BookStatus.Init;
			infoSect = sbpis;
		}

		/// <summary>
		/// 清空图书信息类的运行信息，包括文章列表
		/// </summary>
		public void Clear()
		{
			Status = BookStatus.Init;
			Articles = new System.Collections.ArrayList();
			FinishedCount = 0;
			Message = null;
		}
	}

	/// <summary>
	/// 图书创建类
	/// </summary>
	public class BookCreator
	{
		/// <summary>
		/// 下载网页
		/// </summary>
		/// <param name="strURL">网页URL</param>
		/// <returns>网页内容</returns>
		public string Download( string strURL )
		{
			try 
			{
				System.Net.WebRequest request = System.Net.WebRequest.Create( strURL );
				System.Net.WebResponse response = request.GetResponse();
				System.IO.StreamReader stream = new System.IO.StreamReader( response.GetResponseStream(), System.Text.Encoding.Default );
				string strInput = stream.ReadToEnd();

				response.Close();
				stream.Close(); 
				return strInput;
			} 
			catch ( Exception ex ) 
			{
				throw new BookException( BookException.ErrorCode.DownloadFail, ex.Message );
			}
		}

		/// <summary>
		/// 创建图书文件
		/// </summary>
		/// <param name="book">图书信息类</param>
		/// <param name="ws">网站信息类</param>
		public void Create(  Book book, Website ws )
		{
			BookStarToy.SBP.SBP_Creator sbp = new BookStarToy.SBP.SBP_Creator();
			try 
			{
				// 下载并分析目录文件
				book.Status = BookStatus.Init;
				string strInput = Download( book.URL ); 

				// 获取书名
				book.Name = ws.GetValue( strInput, SiteValueType.BookName ); 
				
				// 获取文章信息
				NameValueCollection[] nvs = ws.GetValueAllList( strInput, SiteValueType.ArticleInfo );
				for ( int i = 1; i < nvs.Length; i++ )
				{
					NameValueCollection nv = nvs[i];
					string strTitle = nv[SiteValueType.ArticleName];
					string strURL = Website.GetRealURL( book.URL, nv[SiteValueType.ArticleURL] );
					book.Add( strTitle, strURL );
				}

				// 获取文章网页插入SBP
				book.Status = BookStatus.Building;
				sbp.Create( book.Path );
				if ( null == book.infoSect.BOOK_NAME || "" == book.infoSect.BOOK_NAME )
					book.infoSect.BOOK_NAME = book.Name;
				sbp.AddSection( book.infoSect ); 
				for ( int i = 0; i < book.Count; i++ )
				{
					// 获取文章网页
					Article article = book[i];
					article.Status = ArticleStatus.Downloading; 
					strInput = Download( article.URL );

					// 分析文章网页
					article.Status = ArticleStatus.Parsing; 
					nvs = ws.GetValueAllList( strInput, SiteValueType.ArticleText ); 
					if ( null == nvs || nvs.Length == 0 )				
						throw new BookException( BookException.ErrorCode.GetTextFail, null );
					System.Text.StringBuilder sb = new System.Text.StringBuilder();
					for ( int j = 0; j < nvs.Length; j ++ )
					{
						NameValueCollection nv = nvs[j];
						sb.Append( nv[SiteValueType.ArticleText] + "\n" );
					}

					// 创建文件段，并写入SBP
					article.Status = ArticleStatus.Saving; 
					FileSection fs = new FileSection();
					fs.FILE_NAME = article.Name;
					fs.FILE_TEXT = sb.ToString();
					fs.CompressType = book.Params.CompressType;
					sbp.AddSection( fs );
					article.Status = ArticleStatus.Finished;
	 
					// 完成文章数加一
					book.FinishedCount ++;
				}

				book.Status = BookStatus.Finished;
				sbp.Close();
			}
			catch ( BookException bex)
			{
				sbp.Close();
				book.Status = BookStatus.Error;
				book.Message = bex.Message; 
			}
		}
	}

	/// <summary>
	/// 图书异常类
	/// </summary>
	public class BookException : System.ApplicationException 
	{
		/// <summary>
		/// 错误代码枚举
		/// </summary>
		public enum ErrorCode { 
			/// <summary>未知错误</summary>
			Unknown, 
			/// <summary>下载错误</summary>
			DownloadFail, 
			/// <summary>获取网页信息错误</summary>
			GetTextFail 
		}

		/// <summary>当前错误代码</summary>
		ErrorCode Error = ErrorCode.Unknown;
		
		/// <summary>错误信息</summary>
		string strMessage = null;
		
		/// <summary>获取描述当前异常的消息</summary>
		public override string Message {
			get 
			{
				switch ( Error )
				{
					case ErrorCode.DownloadFail:return "下载失败，原因：" + strMessage;
					case ErrorCode.GetTextFail:return "获取文章文本失败";
					default:
						return  "未知错误";
				}
			}
		}

		/// <summary>
		/// 构造函数
		/// </summary>
		/// <param name="errcode">错误代码</param>
		/// <param name="msg">错误信息</param>
		public BookException ( ErrorCode errcode, string msg )
		{
			Error = errcode;
			strMessage = msg;
		}
	}

	/// <summary>
	/// 图书管理，管理创建过程
	/// </summary>
	class BookManager
	{
		public WebsiteManager websiteManager = new WebsiteManager();

	}
}
